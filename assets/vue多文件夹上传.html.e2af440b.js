import{_ as p,r as e,o,b as c,d as n,e as t,F as l,f as s,a as u}from"./app.be23bc2b.js";const r={},i=n("h2",{id:"vue\u591A\u6587\u4EF6\u5939\u4E0A\u4F20-\u4F20\u6587\u4EF6\u5939",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vue\u591A\u6587\u4EF6\u5939\u4E0A\u4F20-\u4F20\u6587\u4EF6\u5939","aria-hidden":"true"},"#"),s(),n("code",null,"vue"),s("\u591A\u6587\u4EF6\u5939\u4E0A\u4F20(\u4F20\u6587\u4EF6\u5939)")],-1),k=n("p",null,"\u91CD\u70B9:",-1),b={href:"https://github.com/unzoa/input-files-to-tree",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"\u5C06\u6587\u4EF6\u6570\u7EC4\u6811\u5F62\u5316",-1),d={id:"webkitdirectory\u5C5E\u6027",tabindex:"-1"},f=n("a",{class:"header-anchor",href:"#webkitdirectory\u5C5E\u6027","aria-hidden":"true"},"#",-1),_=s(),g={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/file#webkitdirectory",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"webkitdirectory",-1),h=s("\u5C5E\u6027"),v=s("\u5982\u679C\u51FA\u73B0\u5E03\u5C14\u5C5E\u6027 "),w=n("code",null,"webkitdirectory",-1),q=s("\uFF0C\u8868\u793A\u5728\u6587\u4EF6\u9009\u62E9\u5668\u754C\u9762\u4E2D\u7528\u6237\u53EA\u80FD\u9009\u62E9\u76EE\u5F55\u3002\u66F4\u591A\u7EC6\u8282\u548C\u793A\u4F8B\u89C1 "),x={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLInputElement/webkitdirectory",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"HTMLInputElement.webkitdirectory",-1),E=s("\u3002"),N=n("p",null,[s("\u5C3D\u7BA1 "),n("code",null,"webkitdirectory"),s(" \u6700\u521D\u4EC5\u4E3A\u57FA\u4E8E Webkit \u7684\u6D4F\u89C8\u5668\u5B9E\u73B0\uFF0C\u5B83\u8FD8\u5728 Microsoft Edge \u548C Firefox 50 \u53CA\u5176\u540E\u7248\u672C\u4E2D\u53EF\u7528\u3002\u7136\u800C\uFF0C\u5C3D\u7BA1\u5B83\u6709\u76F8\u5BF9\u5E7F\u6CDB\u7684\u652F\u6301\uFF0C\u5B83\u4ECD\u7136\u662F\u975E\u6807\u51C6\u7684\u3002\u9664\u975E\u522B\u65E0\u9009\u62E9\uFF0C\u5426\u5219\u4E0D\u8981\u4F7F\u7528\u5B83\u3002")],-1),C=u(`<p><code>npm i input-files-to-tree</code> // \u591A\u6587\u4EF6\u4F20\u6210\u6811</p><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">webkitdirectory</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>files<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getNewFile<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> treeify <span class="token keyword">from</span> <span class="token string">&quot;input-files-to-tree&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> myFiles <span class="token operator">=</span> ref<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    
 <span class="token comment">// \u9700\u8981\u4E0A\u4F20\u7684\u6587\u4EF6\u6570\u91CF</span>
<span class="token keyword">const</span> fileCount <span class="token operator">=</span> ref<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">// \u83B7\u53D6\u6240\u6709\u6587\u4EF6\u6267\u884C\u64CD\u4F5C</span>
<span class="token keyword">const</span> <span class="token function-variable function">getNewFile</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">e</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    fileCount<span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

    <span class="token comment">// \u6DFB\u52A0\u989D\u5916\u6587\u4EF6\u5BF9\u8C61</span>
    <span class="token keyword">const</span> tar <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">i</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        i<span class="token punctuation">.</span>externalData <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">file</span><span class="token operator">:</span> i <span class="token punctuation">}</span>
        <span class="token keyword">return</span> i
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token function">treeify</span><span class="token punctuation">(</span>tar<span class="token punctuation">)</span>
    <span class="token function">cycle</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>treeData<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token string">&#39;\u6811\u5F62\u6587\u4EF6\u5939\u6837\u5F0F&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token comment">// \u8FD9\u91CC\u9012\u5F52\u7ED9\u53BB\u9664\u4E00\u5BF9\u8C61</span>
<span class="token keyword">const</span> <span class="token function-variable function">cycle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">arr</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            item<span class="token punctuation">.</span>file <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            <span class="token function">cycle</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">upLoadFile</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>file<span class="token punctuation">,</span> item<span class="token punctuation">)</span>  <span class="token comment">// \u8FD9\u91CC\u6267\u884C\u4E0A\u4F20\u6BCF\u4E2A\u6587\u4EF6</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>

<span class="token comment">// \u6587\u4EF6\u4E0A\u4F20</span>
<span class="token keyword">const</span> <span class="token function-variable function">upLoadFile</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">file</span><span class="token operator">:</span> File<span class="token punctuation">,</span> <span class="token literal-property property">item</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;\u5F00\u59CB\u4E0A\u4F20\u6587\u4EF6&quot;</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;\u4E0A\u4F20\u6587\u4EF6&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        fileCount<span class="token punctuation">.</span>value<span class="token operator">--</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fileCount<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;\u6587\u4EF6\u4E0A\u4F20\u7ED3\u675F&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div>`,2);function L(I,z){const a=e("ExternalLinkIcon");return o(),c(l,null,[i,n("blockquote",null,[k,n("p",null,[n("a",b,[m,t(a)])]),n("h3",d,[f,_,n("a",g,[y,t(a)]),h]),n("p",null,[v,w,q,n("a",x,[F,t(a)]),E]),N]),C],64)}var M=p(r,[["render",L]]);export{M as default};
